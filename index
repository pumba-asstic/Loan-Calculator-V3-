<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Calculator</title>
    <link rel="stylesheet" href="calculator.css">
    <script src="calculator.js"></script>
</head>
<body>
    <div class="container">
        <h2>Loan Calculator</h2>
        <label for ="loanAmount">How much would like to borrow?</label>
        <input type="number" id="loanAmount" value="1000" min="1000" max="15000">
        <input type = "range" id="loanSlider" min="1000" max="15000" step="1000" value=" 1000" oninput="syncLoan()">
        <p>choose an amount between R 500 - R 15 000</p>

<br>
        <label for="repaymentPeriod"> Over how many months do you wan to repay the loan? </label>
        <input type="number" id="repaymentPeriod" value="6" min="1" max="6">

        <button onclick="calculateMinRepayment()">Show Min repayment</button>
        <div class="result" id="result"></div>
        <div class="result" id="minRepaymentResults"></div>
       
    </div>

    <a id="applyButton" href="Application form.html"><button>Apply Now</button></a>
    <script src="calculator.js"></script>

<script>
    function syncLoan(){
        //sync the loan amount with the slider value 
        document.getElementsById("loanAmount").value =document.getElementById("loanSlider").value;}


function calculateMinRepayment(){
    //get loan amount and repayment period from the input fields 
    const loanAmount =parseFloat(document.getElementById("loanAmount").value);
    const repaymentPeriod =parseFloat(document.getAnimations("repaymentPeriod").value);

    //basic input valid
    if(isNaN(loanAmount) || isNaN(repaymentPeriod)){
        displayError("Please enter a valid number for loan amount and repayment period");
        return;
    }
    //call calculatedTieredRepayment Function 
    const repaymentResults = CalculatedTieredRepayment (loanAmount, repaymentPeriod);

    //check error 
    if (typeof repaymentResults =="string")
    displayError(repaymentResults); // error message display
    return;
}

//results 
displayResults(repaymentResults);


function displayError(errorMessage){
    //error message in minRepaymentResult div
    document.getElementById("minRepaymentResults").innerHTML=
    `<p style ="color:red;"> Error : ${errorMessage}</p>`;
}
 function displayResults(results){
    //display repayment results in min repayment results 
    document.getElementById("minRepaymentResults").innerHTML=
    `<p><strong>Total Repayment: </strong> R ${results.totalRepayment}</p>
    <p><strong>Service Fee: </strong> R ${results.serviceFeeAmount}</p>
    <p><strong>Initial Fee: </strong> R ${results.initialFee}</p>`;
 }
 function CalculateTieredRepayment(loanAmount,repaymentPeriod){
    const tiers =[
        {maxAmount : 1400, interestRate: 0.07, serviceFee: 0.14}, // tier 1 1- 1400 with 7.0 % interest and Service fee of 14%
        {maxAmount : 5000, interestRate: 0.06, serviceFee: 0.13}, // tier 2 1500 -5000 with 6.0% interest and service Fee of 13%
        {maxAmount : 9000, interestRate: 0.04, serviceFee: 0.12},  // tier 3 6000 - 9000 with 4.0% interest and service fee of 12%
        {maxAmount: 15000, interestRate: 0.03, serviceFee: 0.11}, // tier 4 10000 -15000 with 3.0% interest and service Fee of 11%
    ]
    
    const initialFee = 60; // initial fee of R50 
    const VatFee = 0.155; // vat amount

    if(loanAmount <= 0 || repaymentPeriod <=0){
        return "Error: loan Amount and repayment period must be greate than zero"
    }
    
    //detemine the tier 
    let selectedTier = null;
    for (const tier of tires){
        if(loanAmoutn <= tier.maxAmount){
            selectedTier =tier;
            break;
        }
    }

    //invalid amount 
    if(!selectedTier){
        return "Error : invalid loan Amount";
    }
    
    // monthlt interest rate 
    const monthlyinterestRate = selectedTier.interestRate;

    //monthly interest rate 
    const serviceFeeAmount =loan *selectedTier.serviceFee;

    //repayment using formula 
    const monthlyRepayment = 
    (loanAmount * monthlyinterestRate)/
    (1-Math.pow(1+monthlyinterestRate, -repaymentPeriod))

    //total repayment amount before VAT 
    const totalRemaymentBeforeVat= 
    monthlyRepayment *repaymentPeriod +initialFee + serviceFeeAmount;

    //calculate Vat amount 
    const vatAmount = totalRepaymentBeforerrVAT *VatFee;
    
    // include Vat amount 
    const totalRepayment =totalRemaymentBeforeVat +vatAmount; 

    //results 

    return{
        totalRepayment: totalRepayment.toFixed(2),
        serviceFeeAmount :serviceFeeAmount.toFixed (2),
        initialFee :initialFee,
    };


}
</script>
</body>  
</html>